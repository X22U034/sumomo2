// --- ピン定義 ---
const uint8_t L1 = 3;   // 左モーター IN1
const uint8_t L2 = 11;  // 左モーター IN2
const uint8_t R1 = 9;   // 右モーター IN1
const uint8_t R2 = 10;  // 右モーター IN2

const uint8_t OSR = 15; // 対物センサー右
const uint8_t OSL = 5;  // 対物センサー左
const uint8_t FSR = 14; // 床センサー右
const uint8_t FSL = 4;  // 床センサー左

// PWM の最大値
#define MAX_DUTY 1000
#define PWM_MAX  255

// --- グローバル変数 ---
unsigned long actionStart = 0;     // アクション開始時刻
unsigned long actionDuration = 0;  // アクション時間
bool inAction = false;             // アクション中フラグ

// スタートルーチン管理
bool startDone = false;
int startStep = 0;
unsigned long startStepStart = 0;

// ---------------- set_duty ----------------
void set_duty(int L, int R) {
  if (L >= 0) {
    analogWrite(L1, map(L, 0, MAX_DUTY, 0, PWM_MAX));
    analogWrite(L2, 0);
  } else {
    analogWrite(L1, 0);
    analogWrite(L2, map(-L, 0, MAX_DUTY, 0, PWM_MAX));
  }

  if (R >= 0) {
    analogWrite(R1, map(R, 0, MAX_DUTY, 0, PWM_MAX));
    analogWrite(R2, 0);
  } else {
    analogWrite(R1, 0);
    analogWrite(R2, map(-R, 0, MAX_DUTY, 0, PWM_MAX));
  }
}

void stopMove() { set_duty(0, 0); }

// --- スタートルーチン（ノンブロッキング版） ---
void runStartRoutine() {
  unsigned long now = millis();

  switch (startStep) {
    case 0: // 5秒待機
      stopMove();
      if (now - startStepStart >= 5000) {
        startStep = 1;
        startStepStart = now;
      }
      break;

    case 1: // 斜め右を向く (300ms)
      set_duty(1000, -1000);
      if (now - startStepStart >= 300) {
        startStep = 2;
        startStepStart = now;
      }
      break;

    case 2: // 前進 (500ms)
      set_duty(1000, 1000);
      if (now - startStepStart >= 500) {
        startStep = 3;
        startStepStart = now;
      }
      break;

    case 3: // 左旋回 (400ms)
      set_duty(-1000, 1000);
      if (now - startStepStart >= 400) {
        startStep = 4;
        startStepStart = now;
      }
      break;

    case 4: // 前進 (500ms)
      set_duty(1000, 1000);
      if (now - startStepStart >= 500) {
        startStep = 5;
        startStepStart = now;
      }
      break;

    case 5: // 完了
      stopMove();
      startDone = true;
      break;
  }
}

void setup() {
  pinMode(L1, OUTPUT); pinMode(L2, OUTPUT);
  pinMode(R1, OUTPUT); pinMode(R2, OUTPUT);
  pinMode(OSR, INPUT); pinMode(OSL, INPUT);
  pinMode(FSR, INPUT); pinMode(FSL, INPUT);

  startStepStart = millis(); // スタートルーチン開始時刻
}

void loop() {
  unsigned long now = millis();

  // --- スタートルーチン中なら進行 ---
  if (!startDone) {
    runStartRoutine();
    return;
  }

  // --- アクション中は継続処理 ---
  if (inAction) {
    if (now - actionStart >= actionDuration) {
      inAction = false; // アクション終了
    } else {
      return; // アクション中は他の処理を無視
    }
  }

  // --- センサー判定 ---
  if (digitalRead(OSL) == LOW || digitalRead(OSR) == LOW) {
    set_duty(1000, 1000);   // 相手検知 → 突進
  }
  else if (digitalRead(FSR) == LOW) {
    set_duty(-800, -200);   // 白線検知 → 左へ逃げる
    actionStart = now;
    actionDuration = 200;
    inAction = true;
  }
  else if (digitalRead(FSL) == LOW) {
    set_duty(-200, -800);   // 白線検知 → 右へ逃げる
    actionStart = now;
    actionDuration = 200;
    inAction = true;
  }
  else {
    set_duty(800, 800);     // 通常前進
  }
}
